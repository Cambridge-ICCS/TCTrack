[build-system]
requires = ["setuptools >= 77.0.3"]
build-backend = "setuptools.build_meta"

[project]
name = "tctrack"
version = "0.1.0"
description = "A Python package for generating tropical cyclone tracks."
keywords = ["meteorology", "weather", "tropical cyclone", "tracking"]
authors = [
  { name="Jack Atkinson", email="jwa34@cam.ac.uk" },
  { name="Sam Avis", email="sa2329@cam.ac.uk" },
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Development Status :: 3 - Alpha",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Typing :: Typed',
    "Operating System :: Unix",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Intended Audience :: Science/Research",
]
dependencies = [
    "cf-python",
    "cftime",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-mock",
]
lint = [
    "ruff",
    "blackdoc<=0.4.2",
    "black<=25.1.0",  # Pin version due to blackdoc incompatibility. Remove once resolved
    "mypy",
    "pytest",
]
doc = [
    "sphinx<8.2.0",  # Pin version due to autodoc type hints incompatibilities
    "sphinx_rtd_theme",
    "sphinx_autodoc_typehints",
    "blackdoc<=0.4.2",
    "black<=25.1.0",  # Pin version due to blackdoc incompatibility. Remove once resolved
]
dev = [
    "tctrack[test,lint,doc]",
]

[project.urls]
"Homepage" = "https://github.com/Cambridge-ICCS/TCTrack"
"Repository" = "https://github.com/Cambridge-ICCS/TCTrack"
"Issues" = "https://github.com/Cambridge-ICCS/TCTrack/issues"

[tool.ruff]
# Run linting and formatting on notebooks
extend-include = ["*.ipynb"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules for full details of each ruleset.

# Enable:  D: `pydocstyle`, PL: `pylint`, I: `isort`, W: `pycodestyle whitespace`
#          NPY: `numpy`, FLY: `flynt`, F: `pyflakes`, RUF: `ruff`
#          From flake8: "ARG", "SLF", "S", "BLE", "B", "A", "C4", "EM", "ICN",
#                       "PIE", "Q", "RSE", "SIM", "TID"
select = ["D", "PL", "I", "E", "W", "NPY", "FLY", "F", "RUF",
          "ARG", "SLF", "S", "BLE","B", "A", "C4", "EM", "ICN", "PIE", "Q", "RSE",
          "SIM", "TID"]

# Enable D417 (Missing argument description) on top of the NumPy convention.
extend-select = ["D417"]

# Ignore SIM108 (use ternary instead of if-else) as I think it can obscure intent.
# Ignore RUF002 (ambiguous characters) as it does not allow apostrophes in strings.
ignore = ["SIM108", "RUF002"]

[tool.ruff.lint.pydocstyle]
# Use NumPy convention for checking docstrings
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
# Ignore S101 (use of assert) in tests
# Ignore PLR2004 (magic values) in tests as we regularly compare to a numerical value
"**/tests/*" = ["S101", "PLR2004"]

[[tool.mypy.overrides]]
module = ["cftime.*", "cf.*"]
follow_untyped_imports = true
